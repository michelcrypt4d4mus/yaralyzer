{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":"<p>This is an embedded verson of the <code>yaralyzer</code> GitHub repository's README.md. A few links may not work here that do work over there.</p> <p> </p>"},{"location":"#the-yaralyzer","title":"THE YARALYZER","text":"<p>Visually inspect all of the regex matches (and their sexier, more cloak and dagger cousins, the YARA matches) found in binary data and/or text. See what happens when you force various character encodings upon those matched bytes. With colors.</p>"},{"location":"#quick-start","title":"Quick Start","text":"<pre><code>pipx install yaralyzer\n\n# Scan against YARA definitions in a file:\nyaralyze --yara-rules /secret/vault/sigmunds_malware_rules.yara lacan_buys_the_dip.pdf\n\n# Scan against an arbitrary regular expression:\nyaralyze --regex-pattern 'good and evil.*of\\s+\\w+byte' the_crypto_archipelago.exe\n\n# Scan against an arbitrary YARA hex pattern\nyaralyze --hex-pattern 'd0 93 d0 a3 d0 [-] 9b d0 90 d0 93' one_day_in_the_life_of_ivan_cryptosovich.bin\n</code></pre>"},{"location":"#what-it-do","title":"What It Do","text":"<ol> <li>See the actual bytes your YARA rules are matching. No more digging around copy/pasting the start positions reported by YARA into your favorite hex editor. Displays both the bytes matched by YARA as well as a configurable number of bytes before and after each match in hexadecimal and \"raw\" python string representation.</li> <li>Do the same for byte patterns and regular expressions without writing a YARA file. If you're too lazy to write a YARA file but are trying to determine, say, whether there's a regular expression hidden somewhere in the file you could scan for the pattern <code>'/.+/'</code> and immediately get a window into all the bytes in the file that live between front slashes. Same story for quotes, BOMs, etc. Any regex YARA can handle is supported so the sky is the limit.</li> <li>Detect the possible encodings of each set of matched bytes. <code>chardet</code> is a sophisticated library for guessing character encodings and it is leveraged here.</li> <li>Display the result of forcing various character encodings upon the matched areas. Several default character encodings will be forcibly attempted in the region around the match. <code>chardet</code> will also be leveraged to see if the bytes fit the pattern of any known encoding. If <code>chardet</code> is confident enough (configurable) an attempt at decoding the bytes using that encoding will be displayed.</li> <li>Export the matched regions/decodings to SVG, HTML, and colored text files. Show off your ASCII art.</li> </ol>"},{"location":"#why-it-do","title":"Why It Do","text":"<p>The Yaralyzer's functionality was extracted from The Pdfalyzer when it became apparent that visualizing and decoding pattern matches in binaries had more utility than just in a PDF analysis tool.</p> <p>YARA, for those who are unaware[^1], is branded as a malware analysis/alerting tool but it's actually both a lot more and a lot less than that. One way to think about it is that YARA is a regular expression matching engine on steroids. It can locate regex matches in binaries like any regex engine but it can also do far wilder things like combine regexes in logical groups, compare regexes against all 256 XORed versions of a binary, check for <code>base64</code> and other encodings of the pattern, and more.  Maybe most importantly of all YARA provides a standard text based format for people to share their 'roided regexes with the world. All these features are particularly useful when analyzing or reverse engineering malware, whose authors tend to invest a great deal of time into making stuff hard to find.</p> <p>But... that's also all YARA does. Everything else is up to the user. YARA's just a match engine and if you don't know what to match (or even what character encoding you might be able to match in) it only gets you so far. I found myself a bit frustrated trying to use YARA to look at all the matches of a few critical patterns:</p> <ol> <li>Bytes between escaped quotes (<code>\\\".+\\\"</code> and <code>\\'.+\\'</code>)</li> <li>Bytes between front slashes (<code>/.+/</code>). Front slashes demarcate a regular expression in many implementations and I was trying to see if any of the bytes matching this pattern were actually regexes.</li> </ol> <p>YARA just tells you the byte position and the matched string but it can't tell you whether those bytes are UTF-8, UTF-16, Latin-1, etc. etc. (or none of the above). I also found myself wanting to understand what was going in the region of the matched bytes and not just in the matched bytes. In other words I wanted to scope the bytes immediately before and after whatever got matched.</p> <p>Enter The Yaralyzer, which lets you quickly scan the regions around matches while also showing you what those regions would look like if they were forced into various character encodings.</p> <p>The Yaralyzer isn't a malware reversing tool. It can't do all the things a tool like CyberChef does and it doesn't try to. It's more intended to give you a quick visual overview of suspect regions in the binary so you can hone in on the areas you might want to inspect with a more serious tool like CyberChef.</p>"},{"location":"#installation","title":"Installation","text":"<p>Install it with <code>pipx</code> or <code>pip3</code>. <code>pipx</code> is a marginally better solution as it guarantees any packages installed with it will be isolated from the rest of your local python environment. Of course if you don't really have a local python environment this is a moot point and you can feel free to install with <code>pip</code>/<code>pip3</code>.</p> <pre><code>pipx install yaralyzer\n</code></pre>"},{"location":"#usage","title":"Usage","text":"<p>Run <code>yaralyze -h</code> to see the command line options (screenshot below).</p> <p></p> <p>For info on exporting SVG images, HTML, etc., see Example Output.</p>"},{"location":"#configuration","title":"Configuration","text":"<p>If you place a file called <code>.yaralyzer</code> in your home directory or the current working directory then environment variables specified in that <code>.yaralyzer</code> file will be added to the environment each time yaralyzer is invoked. This provides a mechanism for permanently configuring various command line options so you can avoid typing them over and over. See the example file <code>.yaralyzer.example</code> to see which options can be configured this way.</p> <p>Only one <code>.yaralyzer</code> file will be loaded and the working directory's <code>.yaralyzer</code> takes precedence over the home directory's <code>.yaralyzer</code>.</p>"},{"location":"#as-a-library","title":"As A Library","text":"<p><code>Yaralyzer</code> is the main class. Auto generated documentation for <code>Yaralyzer</code>'s various classes and methods can be found here. It has a variety of alternate constructors supporting:</p> <ol> <li>Precompiled YARA rules</li> <li>Creating a YARA rule from a string</li> <li>Loading YARA rules from files</li> <li>Loading YARA rules from all <code>.yara</code> file in a directory</li> <li>Scanning <code>bytes</code></li> <li>Scanning a file</li> </ol> <p>Should you want to iterate over the <code>BytesMatch</code> (like a <code>re.Match</code> object for a YARA match) and <code>BytesDecoder</code> (tracks decoding attempt stats) objects used by The Yaralyzer, you can do so like this:</p> <pre><code>from yaralyzer.yaralyzer import Yaralyzer\n\nyaralyzer = Yaralyzer.for_rules_files(['/secret/rule.yara'], 'lacan_buys_the_dip.pdf')\n\nfor bytes_match, bytes_decoder in yaralyzer.match_iterator():\n    do_stuff()\n</code></pre>"},{"location":"#example-output","title":"Example Output","text":"<p>The Yaralyzer can export visualizations to HTML, ANSI colored text, and SVG vector images using the file export functionality that comes with Rich as well as a (somewhat limited) plain text JSON format. SVGs can be turned into <code>png</code> format images with a tool like Inkscape or <code>cairosvg</code>. In our experience they both work though we've seen some glitchiness with <code>cairosvg</code>.</p> <p>PyPi Users: If you are reading this document on PyPi be aware that it renders a lot better over on GitHub. Pretty pictures, footnotes that work, etc.</p>"},{"location":"#raw-yara-match-result","title":"Raw YARA match result:","text":""},{"location":"#display-hex-raw-python-string-and-various-attempted-decodings-of-both-the-match-and-the-bytes-before-and-after-the-match-configurable","title":"Display hex, raw python string, and various attempted decodings of both the match and the bytes before and after the match (configurable):","text":""},{"location":"#bonus-see-what-chardetdetect-thinks-about-the-likelihood-your-bytes-are-in-a-given-encodinglanguage","title":"Bonus: see what <code>chardet.detect()</code> thinks about the likelihood your bytes are in a given encoding/language:","text":""},{"location":"#contributing","title":"Contributing","text":"<p>Contributions are more than welcome; see CONTRIBUTING.md for details on environment setup, running the test suite, etc. There's also a TODO list over there of work that needs to be done.</p> <p>[^1]: As I was until recently.</p>"},{"location":"api/","title":"Index","text":""},{"location":"api/#api-overview","title":"API Overview","text":""},{"location":"api/#modules","title":"Modules","text":"<ul> <li><code>bytes_match</code>: <code>BytesMatch</code> class for tracking regex and YARA matches against binary data.</li> <li><code>config</code>: Configuration management for Yaralyzer.</li> <li><code>yaralyzer</code>: Main Yaralyzer class and alternate constructors.</li> <li><code>bytes_decoder</code>: <code>BytesDecoder</code> class for attempting to decode bytes with various encodings.</li> <li><code>decoding_attempt</code>: Class to manage attempting to decode a chunk of bytes into strings with a given encoding.</li> <li><code>character_encodings</code>: Constants related to character encodings.</li> <li><code>encoding_assessment</code>: Helps with <code>chardet</code> library.</li> <li><code>encoding_detector</code>: <code>EncodingDetector</code> class for managing chardet encoding detection.</li> <li><code>decoding_attempts_table</code>: Methods to build the <code>rich.table</code> used to display decoding attempts of a given bytes array.</li> <li><code>file_export</code>: Functions to export Yaralyzer results to various file formats.</li> <li><code>file_hashes_table</code>: Methods for computing and displaying various file hashes.</li> <li><code>regex_match_metrics</code>: <code>RegexMatchMetrics</code> class.</li> <li><code>rich_console</code>: Variables and methods for working with Rich text output.</li> <li><code>argument_parser</code>: Argument parsing for yaralyzer CLI tool.</li> <li><code>logging</code>: Handle logging for <code>yaralyzer</code>.</li> <li><code>yara_match</code>: Rich text decorator for YARA match dicts.</li> <li><code>yara_rule_builder</code>: Builds bare bones YARA rules to match strings and regex patterns.</li> </ul>"},{"location":"api/#classes","title":"Classes","text":"<ul> <li><code>bytes_match.BytesMatch</code>: Simple class to keep track of regex matches against binary data.</li> <li><code>config.YaralyzerConfig</code>: Handles parsing of command line args and environment variables for Yaralyzer.</li> <li><code>yaralyzer.Yaralyzer</code>: Central class that handles setting up / compiling YARA rules and reading binary data from files as needed.</li> <li><code>bytes_decoder.BytesDecoder</code>: Handles decoding a chunk of bytes into strings using various possible encodings, ranking and displaying results.</li> <li><code>decoding_attempt.DecodingAttempt</code>: Manages the process of attempting to decode a chunk of bytes into a string using a specified encoding.</li> <li><code>encoding_assessment.EncodingAssessment</code>: Class to smooth some of the rough edges around the <code>dict</code>s returned by <code>chardet.detect_all()</code>.</li> <li><code>encoding_detector.EncodingDetector</code>: Manager class to ease dealing with the encoding detection library <code>chardet</code>.</li> <li><code>decoding_attempts_table.DecodingTableRow</code>: DecodingTableRow(encoding_label, confidence_text, errors_while_decoded, decoded_string, confidence, encoding, sort_score, encoding_label_plain)</li> <li><code>file_hashes_table.BytesInfo</code>: BytesInfo(size, md5, sha1, sha256)</li> <li><code>regex_match_metrics.RegexMatchMetrics</code>: Class to measure what we enounter as we iterate over all matches of a relatively simple byte level regex.</li> <li><code>argument_parser.OutputSection</code>: OutputSection(argument, method)</li> <li><code>logging.BufferingFormatter</code>: A formatter suitable for formatting a number of records.</li> <li><code>logging.FileHandler</code>: A handler class which writes formatted logging records to disk files.</li> <li><code>logging.Filter</code>: Filter instances are used to perform arbitrary filtering of LogRecords.</li> <li><code>logging.Filterer</code>: A base class for loggers and handlers which allows them to share</li> <li><code>logging.Formatter</code>: Formatter instances are used to convert a LogRecord to text.</li> <li><code>logging.Handler</code>: Handler instances dispatch logging events to specific destinations.</li> <li><code>logging.LogRecord</code>: A LogRecord instance represents an event being logged.</li> <li><code>logging.Logger</code>: Instances of the Logger class represent a single logging channel. A</li> <li><code>logging.LoggerAdapter</code>: An adapter for loggers which makes it easier to specify contextual</li> <li><code>logging.Manager</code>: There is [under normal circumstances] just one Manager instance, which</li> <li><code>logging.NullHandler</code>: This handler does nothing. It's intended to be used to avoid the</li> <li><code>logging.PercentStyle</code></li> <li><code>logging.PlaceHolder</code>: PlaceHolder instances are used in the Manager logger hierarchy to take</li> <li><code>logging.RootLogger</code>: A root logger is not that different to any other logger, except that</li> <li><code>logging.StrFormatStyle</code></li> <li><code>logging.StreamHandler</code>: A handler class which writes logging records, appropriately formatted,</li> <li><code>logging.StringTemplateStyle</code></li> <li><code>yara_match.YaraMatch</code>: Rich text decorator for YARA match dicts.</li> </ul>"},{"location":"api/#functions","title":"Functions","text":"<ul> <li><code>config.config_var_name</code>: Get the name of <code>env_var</code> and strip off <code>YARALYZER_</code> prefix.</li> <li><code>config.is_env_var_set_and_not_false</code>: Return <code>True</code> if <code>var_name</code> is not empty and set to anything other than \"false\" (capitalization agnostic).</li> <li><code>config.is_invoked_by_pytest</code>: Return <code>True</code> if invoked in a <code>pytest</code> context.</li> <li><code>yaralyzer.yaralyze</code>: Entry point for yaralyzer when invoked as a script.</li> <li><code>character_encodings.encoding_offsets</code>: Get possible offsets for a given encoding. If the encoding is not in <code>WIDE_UTF_ENCODINGS</code>, return <code>[0]</code>.</li> <li><code>character_encodings.encoding_width</code>: Get the width of a character in bytes for a given encoding, which is the number of possible offsets.</li> <li><code>character_encodings.is_wide_utf</code>: Check if the encoding is a wide UTF encoding (UTF-16 or UTF-32).</li> <li><code>character_encodings.scrub_c1_control_chars</code>: Fill in a <code>dict</code> with integer keys/values corresponding to where a given char encoding has no chars</li> <li><code>decoding_attempts_table.assessment_only_row</code>: Build a <code>DecodingTableRow</code> with just <code>chardet</code> assessment confidence data and no actual decoding attempt string.</li> <li><code>decoding_attempts_table.decoding_table_row</code>: Build a table row for a decoding attempt.</li> <li><code>decoding_attempts_table.new_decoding_attempts_table</code>: Build a new rich <code>Table</code> with two rows, the raw and hex views of the <code>bytes_match</code> data.</li> <li><code>file_export.export_json</code>: Export YARA scan results to JSON.</li> <li><code>file_export.invoke_rich_export</code>: Announce the export, perform the export, and announce completion.</li> <li><code>file_hashes_table.bytes_hashes_table</code>: Build a Rich <code>Table</code> displaying the size, MD5, SHA1, and SHA256 hashes of a byte sequence.</li> <li><code>file_hashes_table.compute_file_hashes</code>: Compute the size, MD5, SHA1, and SHA256 hashes for a given byte sequence.</li> <li><code>file_hashes_table.compute_file_hashes_for_file</code>: Compute the size, MD5, SHA1, and SHA256 hashes for the contents of a file.</li> <li><code>rich_console.console_print_with_fallback</code>: <code>rich.console.print()</code> with fallback to regular <code>print()</code> if there's a Rich Markup issue.</li> <li><code>rich_console.console_width</code>: Current width set in <code>console</code> object.</li> <li><code>rich_console.console_width_possibilities</code>: Returns a list of possible console widths, the first being the current terminal width.</li> <li><code>rich_console.print_fatal_error_and_exit</code>: Print a fatal error message in a <code>Panel</code> and exit.</li> <li><code>rich_console.print_header_panel</code>: Print a headline inside a styled Rich <code>Panel</code> to the console.</li> <li><code>rich_console.theme_colors_with_prefix</code>: Return a list of (name, style) <code>Text</code> objects for all styles in the theme that start with <code>prefix</code>.</li> <li><code>argument_parser.get_export_basepath</code>: Get the basepath (directory + filename without extension) for exported files.</li> <li><code>argument_parser.parse_arguments</code>: Parse command line args. Most arguments can also be communicated to the app by setting env vars.</li> <li><code>logging.addLevelName</code>: Associate 'levelName' with 'level'.</li> <li><code>logging.basicConfig</code>: Do basic configuration for the logging system.</li> <li><code>logging.captureWarnings</code>: If capture is true, redirect all warnings to the logging package.</li> <li><code>logging.configure_logger</code>: Set up a file or stream <code>logger</code> depending on the configuration.</li> <li><code>logging.critical</code>: Log a message with severity 'CRITICAL' on the root logger. If the logger</li> <li><code>yara_rule_builder.build_yara_rule</code>: Build a compiled <code>yara.Rule</code> object.</li> <li><code>yara_rule_builder.safe_label</code>: YARA rule and pattern names can only contain alphanumeric chars.</li> <li><code>yara_rule_builder.yara_rule_string</code>: Build a YARA rule string for a given <code>pattern</code>.</li> </ul> <p>This file was automatically generated via lazydocs.</p>"},{"location":"api/argument_parser/","title":"Argument parser","text":""},{"location":"api/argument_parser/#module-argument_parser","title":"module <code>argument_parser</code>","text":"<p>Argument parsing for yaralyzer CLI tool. </p>"},{"location":"api/argument_parser/#global-variables","title":"Global Variables","text":"<ul> <li>CONFIDENCE_SCORE_RANGE</li> <li>YARA_REGEX_MODIFIERS</li> <li>YARA_RULES_ARGS</li> <li>DESCRIPTION</li> <li>EPILOG</li> </ul>"},{"location":"api/argument_parser/#function-parse_arguments","title":"function <code>parse_arguments</code>","text":"<pre><code>parse_arguments(args: Optional[Namespace] = None)\n</code></pre> <p>Parse command line args. Most arguments can also be communicated to the app by setting env vars. If <code>args</code> are passed neither rules nor a regex need be provided as it is assumed the constructor will instantiate a <code>Yaralyzer</code> object directly. </p> <p>Args:</p> <ul> <li><code>args</code> (Optional[Namespace], optional):  If provided, use these args instead of parsing from command line.  Defaults to <code>None</code>. </li> </ul> <p>Raises:</p> <ul> <li><code>ArgumentError</code>:  If args are invalid. </li> </ul> <p></p>"},{"location":"api/argument_parser/#function-get_export_basepath","title":"function <code>get_export_basepath</code>","text":"<pre><code>get_export_basepath(args: Namespace, yaralyzer: Yaralyzer)\n</code></pre> <p>Get the basepath (directory + filename without extension) for exported files. </p> <p></p>"},{"location":"api/argument_parser/#class-outputsection","title":"class <code>OutputSection</code>","text":"<p>OutputSection(argument, method) </p> <p>This file was automatically generated via lazydocs.</p>"},{"location":"api/bytes_decoder/","title":"Bytes decoder","text":""},{"location":"api/bytes_decoder/#module-bytes_decoder","title":"module <code>bytes_decoder</code>","text":"<p><code>BytesDecoder</code> class for attempting to decode bytes with various encodings. </p>"},{"location":"api/bytes_decoder/#global-variables","title":"Global Variables","text":"<ul> <li>ENCODING</li> <li>ENCODINGS_TO_ATTEMPT</li> <li>CENTER</li> <li>WAS_DECODABLE_YES_NO</li> <li>SCORE_SCALER</li> </ul>"},{"location":"api/bytes_decoder/#class-bytesdecoder","title":"class <code>BytesDecoder</code>","text":"<p>Handles decoding a chunk of bytes into strings using various possible encodings, ranking and displaying results. </p> <p>This class leverages the <code>chardet</code> library and custom logic to try multiple encodings, track decoding outcomes, and present the results in a rich, user-friendly format. It is used to analyze and display the possible interpretations of a byte sequence, especially in the context of YARA matches or binary analysis. </p> <p>Attributes:</p> <ul> <li><code>bytes_match</code> (BytesMatch):  The <code>BytesMatch</code> instance being decoded. </li> <li><code>bytes</code> (bytes):  The bytes (including surrounding context) to decode. </li> <li><code>label</code> (str):  Label for this decoding attempt. </li> <li><code>was_match_decodable</code> (dict):  Tracks successful decodes per encoding. </li> <li><code>was_match_force_decoded</code> (dict):  Tracks forced decodes per encoding. </li> <li><code>was_match_undecodable</code> (dict):  Tracks failed decodes per encoding. </li> <li><code>decoded_strings</code> (dict):  Maps encoding to decoded string. </li> <li><code>undecoded_rows</code> (list):  Stores undecoded table rows. </li> <li><code>decodings</code> (list):  List of DecodingAttempt objects for each encoding tried. </li> <li><code>encoding_detector</code> (EncodingDetector):  Used to detect and assess possible encodings. </li> </ul> <p></p>"},{"location":"api/bytes_decoder/#method-__init__","title":"method <code>__init__</code>","text":"<pre><code>__init__(bytes_match: 'BytesMatch', label: Optional[str] = None) \u2192 None\n</code></pre> <p>Initialize a <code>BytesDecoder</code> for attempting to decode a chunk of bytes using various encodings. </p> <p>Args:</p> <ul> <li><code>bytes_match</code> (BytesMatch):  The <code>BytesMatch</code> object containing the bytes to decode and match metadata. </li> <li><code>label</code> (Optional[str], optional):  Optional label for this decoding attempt. Defaults to the match label. </li> </ul> <p>This file was automatically generated via lazydocs.</p>"},{"location":"api/bytes_match/","title":"Bytes match","text":""},{"location":"api/bytes_match/#module-bytes_match","title":"module <code>bytes_match</code>","text":"<p><code>BytesMatch</code> class for tracking regex and YARA matches against binary data. </p>"},{"location":"api/bytes_match/#global-variables","title":"Global Variables","text":"<ul> <li>ALERT_STYLE</li> <li>GREY_ADDRESS</li> </ul>"},{"location":"api/bytes_match/#class-bytesmatch","title":"class <code>BytesMatch</code>","text":"<p>Simple class to keep track of regex matches against binary data. </p> <p>Basically a Regex <code>re.match</code> object with some (not many) extra bells and whistles, most notably the <code>surrounding_bytes</code> property. </p> <p></p>"},{"location":"api/bytes_match/#method-__init__","title":"method <code>__init__</code>","text":"<pre><code>__init__(\n    matched_against: bytes,\n    start_idx: int,\n    length: int,\n    label: str,\n    ordinal: int,\n    match: Optional[Match] = None,\n    highlight_style: str = 'orange1'\n) \u2192 None\n</code></pre> <p>Initialize a <code>BytesMatch</code> object representing a match against binary data. </p> <p>Args:</p> <ul> <li><code>matched_against</code> (bytes):  The full byte sequence that was searched. </li> <li><code>start_idx</code> (int):  Start index of the match in the byte sequence. </li> <li><code>length</code> (int):  Length of the match in bytes. </li> <li><code>label</code> (str):  Label for the match (e.g., regex or YARA rule name). </li> <li><code>ordinal</code> (int):  This was the Nth match for this pattern (used for labeling only). </li> <li><code>match</code> (Optional[re.Match]):  Regex <code>match</code> object, if available. </li> <li><code>highlight_style</code> (str):  Style to use for highlighting the match. </li> </ul> <p></p>"},{"location":"api/bytes_match/#method-bytes_hashes_table","title":"method <code>bytes_hashes_table</code>","text":"<pre><code>bytes_hashes_table() \u2192 Table\n</code></pre> <p>Build a table of MD5/SHA hashes for the matched bytes. </p> <p>Returns:</p> <ul> <li><code>Table</code>:  Rich <code>Table</code> object with hashes. </li> </ul> <p></p>"},{"location":"api/bytes_match/#classmethod-from_regex_match","title":"classmethod <code>from_regex_match</code>","text":"<pre><code>from_regex_match(\n    matched_against: bytes,\n    match: Match,\n    ordinal: int,\n    highlight_style: str = 'orange1'\n) \u2192 BytesMatch\n</code></pre> <p>Alternate constructor to build a <code>BytesMatch</code> from a regex match object. </p> <p>Args:</p> <ul> <li><code>matched_against</code> (bytes):  The bytes searched. </li> <li><code>match</code> (re.Match):  The regex <code>match</code> object. </li> <li><code>ordinal</code> (int):  This was the Nth match for this pattern (used for labeling only). </li> <li><code>highlight_style</code> (str):  Style for highlighting. </li> </ul> <p>Returns:</p> <ul> <li><code>BytesMatch</code>:  The constructed <code>BytesMatch</code> instance. </li> </ul> <p></p>"},{"location":"api/bytes_match/#classmethod-from_yara_match","title":"classmethod <code>from_yara_match</code>","text":"<pre><code>from_yara_match(\n    matched_against: bytes,\n    yara_match: dict,\n    highlight_style: str = 'orange1'\n) \u2192 Iterator[ForwardRef('BytesMatch')]\n</code></pre> <p>Yield a <code>BytesMatch</code> for each string returned as part of a YARA match result dict. </p> <p>Args:</p> <ul> <li><code>matched_against</code> (bytes):  The bytes searched. </li> <li><code>yara_match</code> (dict):  YARA match result dictionary. </li> <li><code>highlight_style</code> (str):  Style for highlighting. </li> </ul> <p>Yields:</p> <ul> <li><code>BytesMatch</code>:  For each string match in the YARA result. </li> </ul> <p></p>"},{"location":"api/bytes_match/#classmethod-from_yara_str","title":"classmethod <code>from_yara_str</code>","text":"<pre><code>from_yara_str(\n    matched_against: bytes,\n    rule_name: str,\n    yara_str_match: StringMatch,\n    yara_str_match_instance: StringMatchInstance,\n    ordinal: int,\n    highlight_style: str = 'orange1'\n) \u2192 BytesMatch\n</code></pre> <p>Alternate constructor to build a <code>BytesMatch</code> from a YARA string match instance. </p> <p>Args:</p> <ul> <li><code>matched_against</code> (bytes):  The bytes searched. </li> <li><code>rule_name</code> (str):  Name of the YARA rule. </li> <li><code>yara_str_match</code> (StringMatch):  YARA string match object. </li> <li><code>yara_str_match_instance</code> (StringMatchInstance):  Instance of the string match. </li> <li><code>ordinal</code> (int):  The Nth match for this pattern. </li> <li><code>highlight_style</code> (str):  Style for highlighting. </li> </ul> <p>Returns:</p> <ul> <li><code>BytesMatch</code>:  The constructed BytesMatch instance. </li> </ul> <p></p>"},{"location":"api/bytes_match/#method-is_decodable","title":"method <code>is_decodable</code>","text":"<pre><code>is_decodable() \u2192 bool\n</code></pre> <p>Determine if the matched bytes should be decoded. </p> <p>Whether the bytes are decodable depends on whether <code>SUPPRESS_DECODES_TABLE</code> is set and whether the match length is between <code>MIN</code>/<code>MAX_DECODE_LENGTH</code>. </p> <p>Returns:</p> <ul> <li><code>bool</code>:  <code>True</code> if decodable, <code>False</code> otherwise. </li> </ul> <p></p>"},{"location":"api/bytes_match/#method-location","title":"method <code>location</code>","text":"<pre><code>location() \u2192 Text\n</code></pre> <p>Get a styled <code>Text</code> object describing the start and end index of the match. </p> <p>Returns:</p> <ul> <li><code>Text</code>:  Rich Text object like '(start idx: 348190, end idx: 348228)'. </li> </ul> <p></p>"},{"location":"api/bytes_match/#method-style_at_position","title":"method <code>style_at_position</code>","text":"<pre><code>style_at_position(idx) \u2192 str\n</code></pre> <p>Get the style for the byte at position <code>idx</code> within the matched bytes. </p> <p>Args:</p> <ul> <li><code>idx</code> (int):  Index within the surrounding bytes. </li> </ul> <p>Returns:</p> <ul> <li><code>str</code>:  The style to use for this byte (highlight or greyed out). </li> </ul> <p></p>"},{"location":"api/bytes_match/#method-suppression_notice","title":"method <code>suppression_notice</code>","text":"<pre><code>suppression_notice() \u2192 Text\n</code></pre> <p>Generate a message for when the match is too short or too long to decode. </p> <p>Returns:</p> <ul> <li><code>Text</code>:  Rich <code>Text</code> object with the suppression notice. </li> </ul> <p></p>"},{"location":"api/bytes_match/#method-to_json","title":"method <code>to_json</code>","text":"<pre><code>to_json() \u2192 dict\n</code></pre> <p>Convert this <code>BytesMatch</code> to a JSON-serializable dictionary. </p> <p>Returns:</p> <ul> <li><code>dict</code>:  Dictionary representation of the match, suitable for JSON serialization. </li> </ul> <p>This file was automatically generated via lazydocs.</p>"},{"location":"api/character_encodings/","title":"Character encodings","text":""},{"location":"api/character_encodings/#module-character_encodings","title":"module <code>character_encodings</code>","text":"<p>Constants related to character encodings. </p> <p>Helpful links: </p> <ul> <li> <p>ISO-8859: www.mit.edu/people/kenta/two/iso8859.html </p> </li> <li> <p>UTF-8: www.utf8-chartable.de/unicode-utf8-table.pl?utf8=dec  # noqa: E501 </p> </li> </ul>"},{"location":"api/character_encodings/#global-variables","title":"Global Variables","text":"<ul> <li>NEWLINE_BYTE</li> <li>ENCODING</li> <li>ASCII</li> <li>UTF_8</li> <li>UTF_16</li> <li>UTF_32</li> <li>ISO_8859_1</li> <li>WINDOWS_1252</li> <li>BOMS</li> <li>UNPRINTABLE_ASCII</li> <li>UNPRINTABLE_ISO_8859_1</li> <li>UNPRINTABLE_UTF_8</li> <li>UNPRINTABLE_WIN_1252</li> <li>UNPRINTABLE_ISO_8859_7</li> <li>ENCODINGS_TO_ATTEMPT</li> <li>SINGLE_BYTE_ENCODINGS</li> <li>WIDE_UTF_ENCODINGS</li> <li>ENCODINGS</li> </ul>"},{"location":"api/character_encodings/#function-scrub_c1_control_chars","title":"function <code>scrub_c1_control_chars</code>","text":"<pre><code>scrub_c1_control_chars(char_map: dict) \u2192 None\n</code></pre> <p>Fill in a <code>dict</code> with integer keys/values corresponding to where a given char encoding has no chars because this range is for C1 control chars (AKA the \"undefined\" part of most character maps). </p> <p></p>"},{"location":"api/character_encodings/#function-encoding_offsets","title":"function <code>encoding_offsets</code>","text":"<pre><code>encoding_offsets(encoding: str) \u2192 list\n</code></pre> <p>Get possible offsets for a given encoding. If the encoding is not in <code>WIDE_UTF_ENCODINGS</code>, return <code>[0]</code>. </p> <p></p>"},{"location":"api/character_encodings/#function-encoding_width","title":"function <code>encoding_width</code>","text":"<pre><code>encoding_width(encoding: str) \u2192 int\n</code></pre> <p>Get the width of a character in bytes for a given encoding, which is the number of possible offsets. </p> <p></p>"},{"location":"api/character_encodings/#function-is_wide_utf","title":"function <code>is_wide_utf</code>","text":"<pre><code>is_wide_utf(encoding: str) \u2192 bool\n</code></pre> <p>Check if the encoding is a wide UTF encoding (UTF-16 or UTF-32). </p> <p>This file was automatically generated via lazydocs.</p>"},{"location":"api/config/","title":"Config","text":""},{"location":"api/config/#module-config","title":"module <code>config</code>","text":"<p>Configuration management for Yaralyzer. </p>"},{"location":"api/config/#global-variables","title":"Global Variables","text":"<ul> <li>YARALYZE</li> <li>YARALYZER</li> <li>PYTEST_FLAG</li> <li>KILOBYTE</li> <li>MEGABYTE</li> </ul>"},{"location":"api/config/#function-config_var_name","title":"function <code>config_var_name</code>","text":"<pre><code>config_var_name(env_var: str) \u2192 str\n</code></pre> <p>Get the name of <code>env_var</code> and strip off <code>YARALYZER_</code> prefix. </p> <p>Example: <code>SURROUNDING_BYTES_ENV_VAR = 'YARALYZER_SURROUNDING_BYTES'      config_var_name(SURROUNDING_BYTES_ENV_VAR) =&gt; 'SURROUNDING_BYTES'</code> </p> <p></p>"},{"location":"api/config/#function-is_env_var_set_and_not_false","title":"function <code>is_env_var_set_and_not_false</code>","text":"<pre><code>is_env_var_set_and_not_false(var_name: str) \u2192 bool\n</code></pre> <p>Return <code>True</code> if <code>var_name</code> is not empty and set to anything other than \"false\" (capitalization agnostic). </p> <p></p>"},{"location":"api/config/#function-is_invoked_by_pytest","title":"function <code>is_invoked_by_pytest</code>","text":"<pre><code>is_invoked_by_pytest() \u2192 bool\n</code></pre> <p>Return <code>True</code> if invoked in a <code>pytest</code> context. </p> <p></p>"},{"location":"api/config/#class-yaralyzerconfig","title":"class <code>YaralyzerConfig</code>","text":"<p>Handles parsing of command line args and environment variables for Yaralyzer. </p> <p></p>"},{"location":"api/config/#classmethod-get_default_arg","title":"classmethod <code>get_default_arg</code>","text":"<pre><code>get_default_arg(arg: str) \u2192 Any\n</code></pre> <p>Return the default value for <code>arg</code> as defined by a <code>DEFAULT_</code> style class variable. </p> <p></p>"},{"location":"api/config/#classmethod-set_args","title":"classmethod <code>set_args</code>","text":"<pre><code>set_args(args: Namespace) \u2192 None\n</code></pre> <p>Set the <code>args</code> class instance variable and update args with any environment variable overrides. </p> <p></p>"},{"location":"api/config/#classmethod-set_argument_parser","title":"classmethod <code>set_argument_parser</code>","text":"<pre><code>set_argument_parser(parser: ArgumentParser) \u2192 None\n</code></pre> <p>Sets the <code>_argument_parser</code> instance variable that will be used to parse command line args. </p> <p></p>"},{"location":"api/config/#classmethod-set_default_args","title":"classmethod <code>set_default_args</code>","text":"<pre><code>set_default_args()\n</code></pre> <p>Set <code>self.args</code> to their defaults as if parsed from the command line. </p> <p>This file was automatically generated via lazydocs.</p>"},{"location":"api/decoding_attempt/","title":"Decoding attempt","text":""},{"location":"api/decoding_attempt/#module-decoding_attempt","title":"module <code>decoding_attempt</code>","text":"<p>Class to manage attempting to decode a chunk of bytes into strings with a given encoding. </p>"},{"location":"api/decoding_attempt/#global-variables","title":"Global Variables","text":"<ul> <li>byteorder</li> <li>ENCODINGS_TO_ATTEMPT</li> <li>SINGLE_BYTE_ENCODINGS</li> <li>UTF_8</li> <li>ALERT_STYLE</li> <li>BYTES_BRIGHTER</li> <li>BYTES_BRIGHTEST</li> <li>BYTES_NO_DIM</li> <li>GREY_ADDRESS</li> </ul>"},{"location":"api/decoding_attempt/#class-decodingattempt","title":"class <code>DecodingAttempt</code>","text":"<p>Manages the process of attempting to decode a chunk of bytes into a string using a specified encoding. </p> <p>This class tries to decode the bytes using the provided encoding, handling both standard and custom decoding strategies (including multi-byte encodings and forced decoding attempts). It tracks the outcome, highlights the decoded output, and provides information about the decoding process. </p> <p>Attributes:</p> <ul> <li><code>bytes</code> (bytes):  The bytes (including context) to decode. </li> <li><code>bytes_match</code> (BytesMatch):  The <code>BytesMatch</code> object containing match and context info. </li> <li><code>encoding</code> (str):  The encoding to attempt. </li> <li><code>encoding_label</code> (str):  Label for the encoding (may include offset info). </li> <li><code>start_offset</code> (int):  Byte offset used for decoding (for multi-byte encodings). </li> <li><code>start_offset_label</code> (Optional[str]):  String label for the offset, if used. </li> <li><code>was_force_decoded</code> (bool):  True if a forced decode was attempted. </li> <li><code>failed_to_decode</code> (bool):  True if decoding failed. </li> <li><code>decoded_string</code> (Text):  The decoded string as a Rich <code>Text</code> object (with highlighting). </li> </ul> <p></p>"},{"location":"api/decoding_attempt/#method-__init__","title":"method <code>__init__</code>","text":"<pre><code>__init__(bytes_match: 'BytesMatch', encoding: str) \u2192 None\n</code></pre> <p>Initialize a <code>DecodingAttempt</code> for a specific <code>encoding</code> on a given <code>BytesMatch</code>. </p> <p>Args:</p> <ul> <li><code>bytes_match</code> (BytesMatch):  The <code>BytesMatch</code> object containing the bytes to decode and match metadata. </li> <li><code>encoding</code> (str):  The encoding to attempt for decoding the bytes. </li> </ul> <p>This file was automatically generated via lazydocs.</p>"},{"location":"api/decoding_attempts_table/","title":"Decoding attempts table","text":""},{"location":"api/decoding_attempts_table/#module-decoding_attempts_table","title":"module <code>decoding_attempts_table</code>","text":"<p>Methods to build the <code>rich.table</code> used to display decoding attempts of a given bytes array. </p> <p>Final output should be a <code>rich.table</code> of decoding attempts that are sorted like this: </p> <ol> <li> <p>String representation of undecoded bytes is always the first row </p> </li> <li> <p>Encodings which <code>chardet.detect()</code> ranked as &gt; 0% likelihood are sorted based on that confidence </p> </li> <li> <p>Then the unchardetectable: </p> </li> <li> <p>Decodings that were successful, unforced, and new </p> </li> <li> <p>Decodings that were \"successful\" but forced </p> </li> <li> <p>Decodings that were the same as other decodings </p> </li> <li> <p>Failed decodings </p> </li> </ol>"},{"location":"api/decoding_attempts_table/#global-variables","title":"Global Variables","text":"<ul> <li>CENTER</li> <li>FOLD</li> <li>MIDDLE</li> <li>RIGHT</li> </ul>"},{"location":"api/decoding_attempts_table/#function-new_decoding_attempts_table","title":"function <code>new_decoding_attempts_table</code>","text":"<pre><code>new_decoding_attempts_table(bytes_match: BytesMatch) \u2192 Table\n</code></pre> <p>Build a new rich <code>Table</code> with two rows, the raw and hex views of the <code>bytes_match</code> data. </p> <p></p>"},{"location":"api/decoding_attempts_table/#function-decoding_table_row","title":"function <code>decoding_table_row</code>","text":"<pre><code>decoding_table_row(\n    assessment: EncodingAssessment,\n    is_forced: Text,\n    txt: Text,\n    score: float\n) \u2192 DecodingTableRow\n</code></pre> <p>Build a table row for a decoding attempt. </p> <p>Args:</p> <ul> <li><code>assessment</code> (EncodingAssessment):  The <code>chardet</code> assessment for the encoding used. </li> <li><code>is_forced</code> (Text):  Text indicating if the decode was forced. </li> <li><code>txt</code> (Text):  The decoded string as a rich <code>Text</code> object (with highlighting). </li> <li><code>score</code> (float):  The score to use for sorting this row in the table. </li> </ul> <p>Returns:</p> <ul> <li><code>DecodingTableRow</code>:  The constructed table row named tuple. </li> </ul> <p></p>"},{"location":"api/decoding_attempts_table/#function-assessment_only_row","title":"function <code>assessment_only_row</code>","text":"<pre><code>assessment_only_row(\n    assessment: EncodingAssessment,\n    score: float\n) \u2192 DecodingTableRow\n</code></pre> <p>Build a <code>DecodingTableRow</code> with just <code>chardet</code> assessment confidence data and no actual decoding attempt string. </p> <p>Args:</p> <ul> <li><code>assessment</code> (EncodingAssessment):  The <code>chardet</code> assessment for the encoding used. </li> <li><code>score</code> (float):  The score to use for sorting this row within the table. </li> </ul> <p>Returns:</p> <ul> <li><code>DecodingTableRow</code>:  The constructed table row named tuple with no decoding attempt string. </li> </ul> <p></p>"},{"location":"api/decoding_attempts_table/#class-decodingtablerow","title":"class <code>DecodingTableRow</code>","text":"<p>DecodingTableRow(encoding_label, confidence_text, errors_while_decoded, decoded_string, confidence, encoding, sort_score, encoding_label_plain) </p> <p>This file was automatically generated via lazydocs.</p>"},{"location":"api/encoding_assessment/","title":"Encoding assessment","text":""},{"location":"api/encoding_assessment/#module-encoding_assessment","title":"module <code>encoding_assessment</code>","text":"<p>Helps with <code>chardet</code> library. </p>"},{"location":"api/encoding_assessment/#global-variables","title":"Global Variables","text":"<ul> <li>ENCODING</li> <li>DIM_COUNTRY_THRESHOLD</li> <li>CONFIDENCE</li> <li>LANGUAGE</li> </ul>"},{"location":"api/encoding_assessment/#class-encodingassessment","title":"class <code>EncodingAssessment</code>","text":"<p>Class to smooth some of the rough edges around the <code>dict</code>s returned by <code>chardet.detect_all()</code>. </p> <p>Attributes:</p> <ul> <li><code>assessment</code> (dict):  The dict returned by <code>chardet.detect_all()</code>. </li> <li><code>encoding</code> (str):  The encoding detected, in lowercase. </li> <li><code>confidence</code> (float):  Confidence score from 0.0 to 100.0. </li> <li><code>confidence_text</code> (Text):  Rich <code>Text</code> object representing the confidence with styling. </li> <li><code>language</code> (Optional[str]):  The detected language, if any. </li> <li><code>encoding_label</code> (Text):  Rich <code>Text</code> object for displaying the encoding with optional language info. </li> </ul> <p></p>"},{"location":"api/encoding_assessment/#method-__init__","title":"method <code>__init__</code>","text":"<pre><code>__init__(assessment: dict) \u2192 None\n</code></pre> <p>Args:</p> <ul> <li><code>assessment</code> (dict):  The <code>dict</code> returned by <code>chardet.detect_all()</code>. </li> </ul> <p></p>"},{"location":"api/encoding_assessment/#classmethod-dummy_encoding_assessment","title":"classmethod <code>dummy_encoding_assessment</code>","text":"<pre><code>dummy_encoding_assessment(encoding: str) \u2192 EncodingAssessment\n</code></pre> <p>Construct an empty <code>EncodingAssessment</code> to use as a dummy when <code>chardet</code> gives us nothing. </p> <p>Args:</p> <ul> <li><code>encoding</code> (str):  The encoding to use for the dummy assessment. </li> </ul> <p></p>"},{"location":"api/encoding_assessment/#method-set_encoding_label","title":"method <code>set_encoding_label</code>","text":"<pre><code>set_encoding_label(alt_text: Optional[str]) \u2192 None\n</code></pre> <p>Alt text is displayed below the encoding in slightly dimmer font. </p> <p>Args:</p> <ul> <li><code>alt_text</code> (Optional[str]):  Text to display along with the encoding (often the inferred language) </li> </ul> <p>This file was automatically generated via lazydocs.</p>"},{"location":"api/encoding_detector/","title":"Encoding detector","text":""},{"location":"api/encoding_detector/#module-encoding_detector","title":"module <code>encoding_detector</code>","text":"<p><code>EncodingDetector</code> class for managing chardet encoding detection. </p>"},{"location":"api/encoding_detector/#global-variables","title":"Global Variables","text":"<ul> <li>ENCODING</li> <li>CONFIDENCE_SCORE_RANGE</li> </ul>"},{"location":"api/encoding_detector/#class-encodingdetector","title":"class <code>EncodingDetector</code>","text":"<p>Manager class to ease dealing with the encoding detection library <code>chardet</code>. </p> <p>Each instance of this class manages a <code>chardet.detect_all()</code> scan on a single set of bytes. </p> <p>Attributes:</p> <ul> <li><code>bytes</code> (bytes):  The bytes to analyze. </li> <li><code>bytes_len</code> (int):  The length of the bytes. </li> <li><code>table</code> (Table):  A rich <code>Table</code> object summarizing the chardet results. </li> <li><code>assessments</code> (List[EncodingAssessment]):  List of <code>EncodingAssessment</code> objects from <code>chardet</code> results. </li> <li><code>unique_assessments</code> (List[EncodingAssessment]):  Unique assessments by encoding, highest confidence only. </li> <li><code>raw_chardet_assessments</code> (List[dict]):  Raw list of dicts returned by <code>chardet.detect_all()</code>. </li> <li><code>force_decode_assessments</code> (List[EncodingAssessment]):  Assessments above force decode threshold. </li> <li><code>force_display_assessments</code> (List[EncodingAssessment]):  Assessments above force display threshold. </li> <li><code>has_any_idea</code> (Optional[bool]):  <code>True</code> if <code>chardet</code> had any idea what the encoding might be,  <code>False</code> if not, <code>None</code> if <code>chardet</code> wasn't run yet. </li> <li><code>force_display_threshold</code> (float):  <code>[class variable]</code> Default confidence threshold for forcing display  in decoded table. </li> <li><code>force_decode_threshold</code> (float):  <code>[class variable]</code> Default confidence threshold for forcing a decode attempt. </li> </ul> <p></p>"},{"location":"api/encoding_detector/#method-__init__","title":"method <code>__init__</code>","text":"<pre><code>__init__(_bytes: bytes) \u2192 None\n</code></pre> <p>Args:</p> <ul> <li><code>_bytes</code> (bytes):  The bytes to analyze with <code>chardet</code>. </li> </ul> <p></p>"},{"location":"api/encoding_detector/#method-assessments_above_confidence","title":"method <code>assessments_above_confidence</code>","text":"<pre><code>assessments_above_confidence(cutoff: float) \u2192 List[EncodingAssessment]\n</code></pre> <p>Return the assessments above the given confidence cutoff. </p> <p></p>"},{"location":"api/encoding_detector/#method-get_encoding_assessment","title":"method <code>get_encoding_assessment</code>","text":"<pre><code>get_encoding_assessment(encoding: str) \u2192 EncodingAssessment\n</code></pre> <p>Get the <code>chardet</code> assessment for a specific encoding. </p> <p>Args:</p> <ul> <li><code>encoding</code> (str):  The encoding to look for. </li> </ul> <p>Returns:</p> <ul> <li><code>EncodingAssessment</code>:  Assessment for the given encoding if it exists, otherwise a dummy with 0 confidence. </li> </ul> <p></p>"},{"location":"api/encoding_detector/#method-has_enough_bytes","title":"method <code>has_enough_bytes</code>","text":"<pre><code>has_enough_bytes() \u2192 bool\n</code></pre> <p>Return <code>True</code> if we have enough bytes to run <code>chardet.detect()</code>. </p> <p>This file was automatically generated via lazydocs.</p>"},{"location":"api/file_export/","title":"File export","text":""},{"location":"api/file_export/#module-file_export","title":"module <code>file_export</code>","text":"<p>Functions to export Yaralyzer results to various file formats. </p> <p></p>"},{"location":"api/file_export/#function-export_json","title":"function <code>export_json</code>","text":"<pre><code>export_json(yaralyzer: Yaralyzer, output_basepath: Optional[str]) \u2192 str\n</code></pre> <p>Export YARA scan results to JSON. </p> <p>Args:</p> <ul> <li><code>yaralyzer</code> (Yaralyzer):  The <code>Yaralyzer</code> object containing the results to export. </li> <li><code>output_basepath</code> (Optional[str]):  Base path to write output to. Should have no file extension. </li> </ul> <p>Returns:</p> <ul> <li><code>str</code>:  Path data was exported to. </li> </ul> <p></p>"},{"location":"api/file_export/#function-invoke_rich_export","title":"function <code>invoke_rich_export</code>","text":"<pre><code>invoke_rich_export(export_method: Callable, output_file_basepath: str) \u2192 str\n</code></pre> <p>Announce the export, perform the export, and announce completion. </p> <p>Args:</p> <ul> <li><code>export_method</code> (Callable):  Usually a <code>Rich.console.save_whatever()</code> method </li> <li><code>output_file_basepath</code> (str):  Path to write output to. Should have no file extension. </li> </ul> <p>Returns:</p> <ul> <li><code>str</code>:  Path data was exported to. </li> </ul> <p>This file was automatically generated via lazydocs.</p>"},{"location":"api/file_hashes_table/","title":"File hashes table","text":""},{"location":"api/file_hashes_table/#module-file_hashes_table","title":"module <code>file_hashes_table</code>","text":"<p>Methods for computing and displaying various file hashes. </p>"},{"location":"api/file_hashes_table/#global-variables","title":"Global Variables","text":"<ul> <li>LEFT</li> <li>GREY</li> </ul>"},{"location":"api/file_hashes_table/#function-bytes_hashes_table","title":"function <code>bytes_hashes_table</code>","text":"<pre><code>bytes_hashes_table(\n    bytes_or_bytes_info: Union[bytes, BytesInfo],\n    title: Optional[str] = None,\n    title_justify: str = 'left'\n) \u2192 Table\n</code></pre> <p>Build a Rich <code>Table</code> displaying the size, MD5, SHA1, and SHA256 hashes of a byte sequence. </p> <p>Args:</p> <ul> <li><code>bytes_or_bytes_info</code> (Union[bytes, BytesInfo]):  The <code>bytes</code> to hash, or a <code>BytesInfo</code>  namedtuple with precomputed values. </li> <li><code>title</code> (Optional[str], optional):  Optional title for the table. Defaults to <code>None</code>. </li> <li><code>title_justify</code> (str, optional):  Justification for the table title. Defaults to <code>\"LEFT\"</code>. </li> </ul> <p>Returns:</p> <ul> <li><code>Table</code>:  A Rich <code>Table</code> object with the size and hash values. </li> </ul> <p></p>"},{"location":"api/file_hashes_table/#function-compute_file_hashes","title":"function <code>compute_file_hashes</code>","text":"<pre><code>compute_file_hashes(_bytes: bytes) \u2192 BytesInfo\n</code></pre> <p>Compute the size, MD5, SHA1, and SHA256 hashes for a given byte sequence. </p> <p>Args:</p> <ul> <li><code>_bytes</code> (bytes):  The <code>bytes</code> to hash. </li> </ul> <p>Returns:</p> <ul> <li><code>BytesInfo</code>:  <code>BytesInfo</code> namedtuple containing size, md5, sha1, and sha256 values. </li> </ul> <p></p>"},{"location":"api/file_hashes_table/#function-compute_file_hashes_for_file","title":"function <code>compute_file_hashes_for_file</code>","text":"<pre><code>compute_file_hashes_for_file(file_path) \u2192 BytesInfo\n</code></pre> <p>Compute the size, MD5, SHA1, and SHA256 hashes for the contents of a file. </p> <p>Args:</p> <ul> <li><code>file_path</code> (str):  Path to the file to hash. </li> </ul> <p>Returns:</p> <ul> <li><code>BytesInfo</code>:  <code>BytesInfo</code> namedtuple containing size, md5, sha1, and sha256 values for the file contents. </li> </ul> <p></p>"},{"location":"api/file_hashes_table/#class-bytesinfo","title":"class <code>BytesInfo</code>","text":"<p>BytesInfo(size, md5, sha1, sha256) </p> <p>This file was automatically generated via lazydocs.</p>"},{"location":"api/regex_match_metrics/","title":"Regex match metrics","text":""},{"location":"api/regex_match_metrics/#module-regex_match_metrics","title":"module <code>regex_match_metrics</code>","text":"<p><code>RegexMatchMetrics</code> class. </p> <p></p>"},{"location":"api/regex_match_metrics/#class-regexmatchmetrics","title":"class <code>RegexMatchMetrics</code>","text":"<p>Class to measure what we enounter as we iterate over all matches of a relatively simple byte level regex. </p> <p>Things like how much many of our matched bytes were we able to decode easily vs. by force vs. not at all, were some encodings have a higher pct of success than others (indicating part of our mystery data might be encoded that way? </p> <p>Example:   \"Find bytes between quotes\" against a relatively large pool of close to random encrypted binary data. </p> <p>Attributes:</p> <ul> <li><code>match_count</code> (int):  Total number of matches found. </li> <li><code>bytes_matched</code> (int):  Total number of bytes matched across all matches. </li> <li><code>matches_decoded</code> (int):  Number of matches where we were able to decode at least some of the matched bytes. </li> <li><code>easy_decode_count</code> (int):  Number of matches where we were able to decode the matched bytes without forcing. </li> <li><code>forced_decode_count</code> (int):  Number of matches where we were only able to decode the matched bytes by forcing. </li> <li><code>undecodable_count</code> (int):  Number of matches where we were unable to decode any of the matched bytes. </li> <li><code>skipped_matches_lengths</code> (defaultdict):  Dictionary mapping lengths of skipped matches to their counts. </li> <li><code>bytes_match_objs</code> (list):  List of <code>BytesMatch</code> objects for all matches encountered. </li> <li><code>per_encoding_stats</code> (defaultdict):  Dictionary mapping encoding names to their respective <code>RegexMatchMetrics</code>. </li> </ul> <p>TODO: use @dataclass decorator https://realpython.com/python-data-classes/ </p> <p></p>"},{"location":"api/regex_match_metrics/#method-__init__","title":"method <code>__init__</code>","text":"<pre><code>__init__() \u2192 None\n</code></pre>"},{"location":"api/regex_match_metrics/#method-num_matches_skipped_for_being_empty","title":"method <code>num_matches_skipped_for_being_empty</code>","text":"<pre><code>num_matches_skipped_for_being_empty() \u2192 int\n</code></pre> <p>Number of matches skipped for being empty (0 length). </p> <p></p>"},{"location":"api/regex_match_metrics/#method-num_matches_skipped_for_being_too_big","title":"method <code>num_matches_skipped_for_being_too_big</code>","text":"<pre><code>num_matches_skipped_for_being_too_big() \u2192 int\n</code></pre> <p>Number of matches skipped for being too big to decode. </p> <p></p>"},{"location":"api/regex_match_metrics/#method-tally_match","title":"method <code>tally_match</code>","text":"<pre><code>tally_match(decoder: BytesDecoder) \u2192 None\n</code></pre> <p>Tally statistics from a <code>BytesDecoder</code> after it has processed a match. </p> <p>Args:</p> <ul> <li><code>decoder</code> (BytesDecoder):  The <code>BytesDecoder</code> that processed a match. </li> </ul> <p>This file was automatically generated via lazydocs.</p>"},{"location":"api/rich_console/","title":"Rich console","text":""},{"location":"api/rich_console/#module-rich_console","title":"module <code>rich_console</code>","text":"<p>Variables and methods for working with Rich text output. </p>"},{"location":"api/rich_console/#global-variables","title":"Global Variables","text":"<ul> <li>DEFAULT_CONSOLE_WIDTH</li> <li>ALERT_STYLE</li> <li>BYTES</li> <li>BYTES_NO_DIM</li> <li>BYTES_BRIGHTEST</li> <li>BYTES_BRIGHTER</li> <li>BYTES_HIGHLIGHT</li> <li>DANGER_HEADER</li> <li>DARK_GREY</li> <li>GREY</li> <li>GREY_ADDRESS</li> <li>PEACH</li> <li>YARALYZER_THEME_DICT</li> <li>CONSOLE_WIDTH</li> <li>CONSOLE_PRINT_BYTE_WIDTH</li> </ul>"},{"location":"api/rich_console/#function-console_width_possibilities","title":"function <code>console_width_possibilities</code>","text":"<pre><code>console_width_possibilities()\n</code></pre> <p>Returns a list of possible console widths, the first being the current terminal width. </p> <p></p>"},{"location":"api/rich_console/#function-console_print_with_fallback","title":"function <code>console_print_with_fallback</code>","text":"<pre><code>console_print_with_fallback(_string: Text | str, style=None) \u2192 None\n</code></pre> <p><code>rich.console.print()</code> with fallback to regular <code>print()</code> if there's a Rich Markup issue. </p> <p></p>"},{"location":"api/rich_console/#function-console_width","title":"function <code>console_width</code>","text":"<pre><code>console_width() \u2192 int\n</code></pre> <p>Current width set in <code>console</code> object. </p> <p></p>"},{"location":"api/rich_console/#function-print_fatal_error_and_exit","title":"function <code>print_fatal_error_and_exit</code>","text":"<pre><code>print_fatal_error_and_exit(error_message: str) \u2192 None\n</code></pre> <p>Print a fatal error message in a <code>Panel</code> and exit. </p> <p>Args:</p> <ul> <li><code>error_message</code> (str):  The error message to display. </li> </ul> <p></p>"},{"location":"api/rich_console/#function-print_header_panel","title":"function <code>print_header_panel</code>","text":"<pre><code>print_header_panel(\n    headline: str,\n    style: str,\n    expand: bool = True,\n    padding: tuple = (0, 2)\n) \u2192 None\n</code></pre> <p>Print a headline inside a styled Rich <code>Panel</code> to the console. </p> <p>Args:</p> <ul> <li><code>headline</code> (str):  The text to display as the panel's headline. </li> <li><code>style</code> (str):  The style to apply to the panel (e.g., color, bold, reverse). </li> <li><code>expand</code> (bool, optional):  Whether the panel should expand to the full console width. Defaults to <code>True</code>. </li> <li><code>padding</code> (tuple, optional):  Padding around the panel content (top/bottom, left/right). Defaults to <code>(0, 2)</code>. </li> </ul> <p></p>"},{"location":"api/rich_console/#function-theme_colors_with_prefix","title":"function <code>theme_colors_with_prefix</code>","text":"<pre><code>theme_colors_with_prefix(prefix: str) \u2192 List[Text]\n</code></pre> <p>Return a list of (name, style) <code>Text</code> objects for all styles in the theme that start with <code>prefix</code>. </p> <p>This file was automatically generated via lazydocs.</p>"},{"location":"api/yara_match/","title":"Yara match","text":""},{"location":"api/yara_match/#module-yara_match","title":"module <code>yara_match</code>","text":"<p>Rich text decorator for YARA match dicts. </p> <p>A YARA match is returned as a <code>dict</code> with this structure: </p> <p>Example: <code>{          'tags': ['foo', 'bar'],          'matches': True,          'namespace': 'default',          'rule': 'my_rule',          'meta': {},          'strings': [              StringMatch1,              StringMatch2          ]      }</code> </p>"},{"location":"api/yara_match/#global-variables","title":"Global Variables","text":"<ul> <li>CENTER</li> <li>INDENT_SPACES</li> <li>MATCH_PADDING</li> <li>YARA_STRING_STYLES</li> <li>RAW_YARA_THEME_COLORS</li> </ul>"},{"location":"api/yara_match/#class-yaramatch","title":"class <code>YaraMatch</code>","text":"<p>Rich text decorator for YARA match dicts. </p> <p></p>"},{"location":"api/yara_match/#method-__init__","title":"method <code>__init__</code>","text":"<pre><code>__init__(match: dict, matched_against_bytes_label: Text) \u2192 None\n</code></pre> <p>Args:</p> <ul> <li><code>match</code> (dict):  The YARA match dict. </li> <li><code>matched_against_bytes_label</code> (Text):  Label indicating what bytes were matched against. </li> </ul> <p>This file was automatically generated via lazydocs.</p>"},{"location":"api/yara_rule_builder/","title":"Yara rule builder","text":""},{"location":"api/yara_rule_builder/#module-yara_rule_builder","title":"module <code>yara_rule_builder</code>","text":"<p>Builds bare bones YARA rules to match strings and regex patterns. </p> <p>Example rule string: </p> <pre><code>rule Just_A_Piano_Man {\n     meta:\n         author           = \"Tim\"\n     strings:\n         $hilton_producer = /Scott.*Storch/\n     condition:\n         $hilton_producer\n}\n</code></pre>"},{"location":"api/yara_rule_builder/#global-variables","title":"Global Variables","text":"<ul> <li>YARALYZE</li> <li>HEX</li> <li>PATTERN</li> <li>REGEX</li> <li>RULE</li> <li>UNDERSCORE</li> <li>YARA_REGEX_MODIFIERS</li> <li>SAFE_LABEL_REPLACEMENTS</li> <li>RULE_TEMPLATE</li> <li>BYTES_RULE_TEMPLATE</li> </ul>"},{"location":"api/yara_rule_builder/#function-yara_rule_string","title":"function <code>yara_rule_string</code>","text":"<pre><code>yara_rule_string(\n    pattern: str,\n    pattern_type: Literal['hex', 'regex'] = 'regex',\n    rule_name: str = 'yaralyze',\n    pattern_label: Optional[str] = 'pattern',\n    modifier: Optional[Literal['ascii', 'fullword', 'nocase', 'wide']] = None\n) \u2192 str\n</code></pre> <p>Build a YARA rule string for a given <code>pattern</code>. </p> <p>Args:</p> <ul> <li><code>pattern</code> (str):  The string or regex pattern to match. </li> <li><code>pattern_type</code> (str):  Either <code>\"regex\"</code> or <code>\"hex\"</code>. Default is <code>\"regex\"</code>. </li> <li><code>rule_name</code> (str):  The name of the YARA rule. Default is <code>\"YARALYZE\"</code>. </li> <li><code>pattern_label</code> (Optional[str]):  The label for the pattern in the YARA rule. Default is <code>\"pattern\"</code>. </li> <li><code>modifier</code> (Optional[str]):  Optional regex modifier (e.g. 'nocase', 'ascii', 'wide', 'fullword').  Only valid if <code>pattern_type</code> is <code>\"regex\"</code>. </li> </ul> <p>Returns:</p> <ul> <li><code>str</code>:  The constructed YARA rule as a string. </li> </ul> <p></p>"},{"location":"api/yara_rule_builder/#function-build_yara_rule","title":"function <code>build_yara_rule</code>","text":"<pre><code>build_yara_rule(\n    pattern: str,\n    pattern_type: Literal['hex', 'regex'] = 'regex',\n    rule_name: str = 'yaralyze',\n    pattern_label: Optional[str] = 'pattern',\n    modifier: Optional[Literal['ascii', 'fullword', 'nocase', 'wide']] = None\n) \u2192 Rule\n</code></pre> <p>Build a compiled <code>yara.Rule</code> object. </p> <p>Args:</p> <ul> <li><code>pattern</code> (str):  The string or regex pattern to match. </li> <li><code>pattern_type</code> (str):  Either <code>\"regex\"</code> or <code>\"hex\"</code>. Default is <code>\"regex\"</code>. </li> <li><code>rule_name</code> (str):  The name of the YARA rule. Default is <code>\"YARALYZE\"</code>. </li> <li><code>pattern_label</code> (Optional[str]):  The label for the pattern in the YARA rule. Default is <code>\"pattern\"</code>. </li> <li><code>modifier</code> (Optional[str]):  Optional regex modifier (e.g. 'nocase', 'ascii', 'wide', 'fullword').  Only valid if <code>pattern_type</code> is <code>\"regex\"</code>. </li> </ul> <p>Returns:</p> <ul> <li><code>yara.Rule</code>:  Compiled YARA rule object. </li> </ul> <p></p>"},{"location":"api/yara_rule_builder/#function-safe_label","title":"function <code>safe_label</code>","text":"<pre><code>safe_label(_label: str) \u2192 str\n</code></pre> <p>YARA rule and pattern names can only contain alphanumeric chars. </p> <p>Args:</p> <ul> <li><code>_label</code> (str):  The label to sanitize. </li> </ul> <p>Returns:</p> <ul> <li><code>str</code>:  A sanitized label safe for use in YARA rules. </li> </ul> <p>This file was automatically generated via lazydocs.</p>"},{"location":"api/yaralyzer/","title":"Yaralyzer","text":""},{"location":"api/yaralyzer/#module-yaralyzer","title":"module <code>yaralyzer</code>","text":"<p>Main Yaralyzer class and alternate constructors. </p>"},{"location":"api/yaralyzer/#global-variables","title":"Global Variables","text":"<ul> <li>dotenv_file</li> <li>output</li> <li>util</li> <li>config</li> <li>helpers</li> <li>bytes_match</li> <li>decoding</li> <li>encoding_detection</li> <li>yaralyzer</li> <li>HEX</li> <li>REGEX</li> <li>PDFALYZER_MSG</li> <li>YARALYZE</li> <li>YARA_FILE_DOES_NOT_EXIST_ERROR_MSG</li> </ul>"},{"location":"api/yaralyzer/#function-yaralyze","title":"function <code>yaralyze</code>","text":"<pre><code>yaralyze()\n</code></pre> <p>Entry point for yaralyzer when invoked as a script. </p> <p>Args are parsed from the command line and environment variables. See <code>yaralyze --help</code> for details. </p> <p></p>"},{"location":"api/yaralyzer/#class-yaralyzer","title":"class <code>Yaralyzer</code>","text":"<p>Central class that handles setting up / compiling YARA rules and reading binary data from files as needed. </p> <p>Alternate constructors are provided depending on whether: </p> <ul> <li> <p>YARA rules are already compiled </p> </li> <li> <p>YARA rules should be compiled from a string </p> </li> <li> <p>YARA rules should be read from a file </p> </li> <li> <p>YARA rules should be read from a directory of .yara files </p> </li> </ul> <p>The real action happens in the <code>__rich__console__()</code> dunder method. </p> <p>Attributes:</p> <ul> <li><code>bytes</code> (bytes):  The binary data to scan. </li> <li><code>bytes_length</code> (int):  The length of the binary data. </li> <li><code>scannable_label</code> (str):  A label for the binary data, typically the filename or a user-provided label. </li> <li><code>rules</code> (yara.Rules):  The compiled YARA rules to use for scanning. </li> <li><code>rules_label</code> (str):  A label for the ruleset, typically derived from filenames or user input. </li> <li><code>highlight_style</code> (str):  The style to use for highlighting matches in the output. </li> <li><code>non_matches</code> (List[dict]):  A list of YARA rules that did not match the binary data. </li> <li><code>matches</code> (List[YaraMatch]):  A list of YaraMatch objects representing the matches found. </li> <li><code>extraction_stats</code> (RegexMatchMetrics):  Metrics related to decoding attempts on matched data </li> </ul> <p></p>"},{"location":"api/yaralyzer/#method-__init__","title":"method <code>__init__</code>","text":"<pre><code>__init__(\n    rules: Union[str, Rules],\n    rules_label: str,\n    scannable: Union[bytes, str],\n    scannable_label: Optional[str] = None,\n    highlight_style: str = 'orange1'\n) \u2192 None\n</code></pre> <p>Initialize a <code>Yaralyzer</code> instance for scanning binary data with YARA rules. </p> <p>Args:</p> <ul> <li><code>rules</code> (Union[str, yara.Rules]):  YARA rules to use for scanning. Can be a string or a pre-compiled  <code>yara.Rules</code> object (strings will be compiled to an instance of <code>yara.Rules</code>). </li> <li><code>rules_label</code> (str):  Label to identify the ruleset in output and logs. </li> <li><code>scannable</code> (Union[bytes, str]):  The data to scan. If it's <code>bytes</code> type then that data is scanned;  if it's a string it is treated as a file path to load bytes from. </li> <li><code>scannable_label</code> (Optional[str], optional):  Label for the <code>scannable</code> arg data.  Required if <code>scannable</code> is <code>bytes</code>.  If <code>scannable</code> is a file path <code>scannable_label</code> will default to the file's basename. </li> <li><code>highlight_style</code> (str, optional):  Style to use for highlighting matches in output.  Defaults to <code>YaralyzerConfig.HIGHLIGHT_STYLE</code>. </li> </ul> <p>Raises:</p> <ul> <li><code>TypeError</code>:  If <code>scannable</code> is <code>bytes</code> and <code>scannable_label</code> is not provided. </li> </ul> <p></p>"},{"location":"api/yaralyzer/#classmethod-for_patterns","title":"classmethod <code>for_patterns</code>","text":"<pre><code>for_patterns(\n    patterns: List[str],\n    patterns_type: str,\n    scannable: Union[bytes, str],\n    scannable_label: Optional[str] = None,\n    rules_label: Optional[str] = None,\n    pattern_label: Optional[str] = None,\n    regex_modifier: Optional[str] = None\n) \u2192 Yaralyzer\n</code></pre> <p>Alternate constructor taking regex pattern strings. Rules label defaults to the patterns joined by comma. </p> <p>Args:</p> <ul> <li><code>patterns</code> (List[str]):  List of regex or hex patterns to build rules from. </li> <li><code>patterns_type</code> (str):  Either <code>\"regex\"</code> or <code>\"hex\"</code> to indicate the type of patterns provided. </li> <li><code>scannable</code> (Union[bytes, str]):  The data to scan. If <code>bytes</code>, raw data is scanned;  if <code>str</code>, it is treated as a file path to load bytes from. </li> <li><code>scannable_label</code> (Optional[str], optional):  Label for the <code>scannable</code> data.  Required if <code>scannable</code> is <code>bytes</code>.  If scannable is a file path, defaults to the file's basename. </li> <li><code>rules_label</code> (Optional[str], optional):  Label for the ruleset. Defaults to the patterns joined by comma. </li> <li><code>pattern_label</code> (Optional[str], optional):  Label for each pattern in the YARA rules. Defaults to \"pattern\". </li> <li><code>regex_modifier</code> (Optional[str], optional):  Optional regex modifier (e.g. \"nocase\", \"ascii\", \"wide\", etc).  Only valid if <code>patterns_type</code> is <code>\"regex\"</code>. </li> </ul> <p></p>"},{"location":"api/yaralyzer/#classmethod-for_rules_dirs","title":"classmethod <code>for_rules_dirs</code>","text":"<pre><code>for_rules_dirs(\n    dirs: List[str],\n    scannable: Union[bytes, str],\n    scannable_label: Optional[str] = None\n) \u2192 Yaralyzer\n</code></pre> <p>Alternate constructor that will load all <code>.yara</code> files in <code>yara_rules_dir</code>. </p> <p>Args:</p> <ul> <li><code>dirs</code> (List[str]):  List of directories to search for <code>.yara</code> files. </li> <li><code>scannable</code> (Union[bytes, str]):  The data to scan. If <code>bytes</code>, raw data is scanned;  if <code>str</code>, it is treated as a file path to load bytes from. </li> <li><code>scannable_label</code> (Optional[str], optional):  Label for the <code>scannable</code> data.  Required if <code>scannable</code> is <code>bytes</code>. If scannable is a file path, defaults to the file's basename. </li> </ul> <p>Raises:</p> <ul> <li><code>FileNotFoundError</code>:  If <code>dirs</code> is not a list of valid directories. </li> </ul> <p></p>"},{"location":"api/yaralyzer/#classmethod-for_rules_files","title":"classmethod <code>for_rules_files</code>","text":"<pre><code>for_rules_files(\n    yara_rules_files: List[str],\n    scannable: Union[bytes, str],\n    scannable_label: Optional[str] = None\n) \u2192 Yaralyzer\n</code></pre> <p>Alternate constructor to load YARA rules from files and label rules with the filenames. </p> <p>Args:</p> <ul> <li><code>yara_rules_files</code> (List[str]):  List of file paths to YARA rules files. </li> <li><code>scannable</code> (Union[bytes, str]):  The data to scan. If <code>bytes</code>, raw data is scanned;  if <code>str</code>, it is treated as a file path to load bytes from. </li> <li><code>scannable_label</code> (Optional[str], optional):  Label for the <code>scannable</code> data.  Required if <code>scannable</code> is <code>bytes</code>. If scannable is a file path, defaults to the file's basename. </li> </ul> <p>Raises:</p> <ul> <li><code>FileNotFoundError</code>:  If any file in <code>yara_rules_files</code> does not exist. </li> <li><code>TypeError</code>:  If <code>yara_rules_files</code> is not a list. </li> </ul> <p></p>"},{"location":"api/yaralyzer/#method-match_iterator","title":"method <code>match_iterator</code>","text":"<pre><code>match_iterator() \u2192 Iterator[Tuple[BytesMatch, BytesDecoder]]\n</code></pre> <p>Iterator version of <code>yaralyze()</code>. </p> <p>Yields:</p> <ul> <li><code>Tuple[BytesMatch, BytesDecoder]</code>:  Match and decode data tuple. </li> </ul> <p></p>"},{"location":"api/yaralyzer/#method-yaralyze","title":"method <code>yaralyze</code>","text":"<pre><code>yaralyze() \u2192 None\n</code></pre> <p>Use YARA to find matches and then force decode them. </p> <p>This file was automatically generated via lazydocs.</p>"}]}